{
  "openapi": "3.0.1",
  "info": {
    "title": "Toggle API",
    "description": "A simple example ASP.NET Core 2.1 Web API",
    "contact": {
      "name": "Paulo Donatilio",
      "url": "https://www.linkedin.com/in/pdonatilio/",
      "email": "pdonatilio@gmail.com"
    },
    "license": {
      "name": "Use under Gnu GPL",
      "url": "https://www.gnu.org/licenses/gpl-3.0.pt-br.html"
    },
    "version": "v1"
  },
  "servers": [
    {
      "url": "http://localhost:9090"
    }
  ],
  "security": [
    {
      "Bearer": []
    }
  ],
  "paths": {
    "/api/Service": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Get all services.",
        "description": "Sample request:\r\n            \r\n    GET api/Service/",
        "operationId": "ApiServiceGet",
        "responses": {
          "200": {
            "description": "Returns a list with all services",
            "content": {}
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Create a New Service",
        "description": "Sample request:\r\n            \r\n    POST api/Service/\r\n    \r\n    {\r\n        \"version\": int,\r\n        \"Name\": \"string\"\r\n    }",
        "operationId": "ApiServicePost",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceDto"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Sucess",
            "content": {}
          },
          "400": {
            "description": "If version or name is null",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "serviceDto"
      }
    },
    "/api/Service/{id}": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Get a specific Service by id.",
        "description": "Sample request:\r\n            \r\n    GET api/Service/{id}",
        "operationId": "ApiServiceByIdGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the service informed by Id",
            "content": {}
          },
          "400": {
            "description": "If id is null or not found",
            "content": {}
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Service"
        ],
        "summary": "Update the service informed by Id",
        "description": "Sample request:\r\n            \r\n    PUT api/Service/\r\n    \r\n    {\r\n        \"version\": int,\r\n        \"name\": \"string\"\r\n    }",
        "operationId": "ApiServiceByIdPut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceDto"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Sucess",
            "content": {}
          },
          "400": {
            "description": "If the version or name is null",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "serviceDto"
      },
      "delete": {
        "tags": [
          "Service"
        ],
        "summary": "Delet a specific service by id.",
        "description": "Sample request:\r\n            \r\n    DELETE api/Service/{id}",
        "operationId": "ApiServiceByIdDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sucess",
            "content": {}
          },
          "400": {
            "description": "If id is null or not found",
            "content": {}
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {}
          }
        }
      }
    },
    "/api/Service/toggles/{id}": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Get all Toggles from a specific service by id.",
        "description": "Sample request:\r\n            \r\n    GET api/Service/toggles/{id}",
        "operationId": "ApiServiceTogglesByIdGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return a list with all Toggles and the most important one of they",
            "content": {}
          },
          "400": {
            "description": "If id is null or not found",
            "content": {}
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {}
          }
        }
      }
    },
    "/api/Toggle": {
      "get": {
        "tags": [
          "Toggle"
        ],
        "summary": "Get all toggles.",
        "description": "Sample request:\r\n            \r\n    GET api/Toggle/",
        "operationId": "ApiToggleGet",
        "responses": {
          "200": {
            "description": "Returns a list with all toggles",
            "content": {}
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Toggle"
        ],
        "summary": "Create a New Toggle",
        "description": "Sample request:\r\n            \r\n    POST api/Toggle/\r\n    \r\n    To include All Services\r\n    {\r\n    \t\"Name\": \"string\",\r\n    \t\"State\": bolean,\r\n    \t\"Value\": int,\r\n    \t\"ServicesList\": [ \"All\" ]\r\n    }\r\n            \r\n    To include The Services 1,2,3 (By Id)\r\n    {\r\n    \t\"Name\": \"string\",\r\n    \t\"State\": bolean,\r\n    \t\"Value\": int,\r\n    \t\"ServicesList\": [ 1,2,3 ]\r\n    }",
        "operationId": "ApiTogglePost",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SavingToggleDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SavingToggleDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SavingToggleDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SavingToggleDto"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Sucess",
            "content": {}
          },
          "400": {
            "description": "If the fields name or ServicesList are null.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "toggleDto"
      }
    },
    "/api/Toggle/{id}": {
      "get": {
        "tags": [
          "Toggle"
        ],
        "summary": "Get a specific Toggle by id.",
        "description": "Sample request:\r\n            \r\n    GET api/Toggle/{id}",
        "operationId": "ApiToggleByIdGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the toggle informed by Id",
            "content": {}
          },
          "400": {
            "description": "If id is null or not found",
            "content": {}
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Toggle"
        ],
        "summary": "Update the toggle informed by Id",
        "description": "Sample request:\r\n            \r\n    PUT api/Toggle/\r\n    \r\n    {\r\n        \"version\": int,\r\n        \"name\": \"string\"\r\n    }",
        "operationId": "ApiToggleByIdPut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ToggleDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToggleDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ToggleDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ToggleDto"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Sucess",
            "content": {}
          },
          "400": {
            "description": "If the version or name is null",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "toggleDto"
      }
    },
    "/api/User": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get all users.",
        "description": "Sample request:\r\n            \r\n    GET api/User/{id}",
        "operationId": "ApiUserGet",
        "responses": {
          "200": {
            "description": "Sucess",
            "content": {}
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a New user",
        "description": "Sample request:\r\n            \r\n    POST api/User/\r\n    \r\n    {\r\n        \"firstName\": \"string\",\r\n        \"lastName\": \"string\",\r\n        \"username\": \"string\",\r\n        \"password\": \"string\",\r\n    }",
        "operationId": "ApiUserPost",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Sucess",
            "content": {}
          },
          "400": {
            "description": "If username exists or password is null",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "userDto"
      }
    },
    "/api/User/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a specific user by id.",
        "description": "Sample request:\r\n            \r\n    GET api/User/{id}",
        "operationId": "ApiUserByIdGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the user informed by Id",
            "content": {}
          },
          "400": {
            "description": "If id is null or not found",
            "content": {}
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update the user informed by Id",
        "description": "Sample request:\r\n            \r\n    PUT api/User/\r\n    \r\n    {\r\n        \"firstName\": \"string\",\r\n        \"lastName\": \"string\",\r\n        \"username\": \"string\",\r\n        \"password\": \"string\",\r\n    }\r\n            \r\nThe fiedls username and password are optionals",
        "operationId": "ApiUserByIdPut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Sucess",
            "content": {}
          },
          "400": {
            "description": "If the id is null or not found or the username is invalid",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "userDto"
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delet a specific user by id.",
        "description": "Sample request:\r\n            \r\n    DELETE api/User/{id}",
        "operationId": "ApiUserByIdDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sucess",
            "content": {}
          },
          "400": {
            "description": "If id is null or not found",
            "content": {}
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {}
          }
        }
      }
    },
    "/api/User/auth": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Get the access token to use the API",
        "description": "Sample request:\r\n            \r\n    POST api/User/auth\r\n    \r\n    {\r\n        \"username\": \"string\",\r\n        \"password\": \"string\",\r\n    }",
        "operationId": "ApiUserAuthPost",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Returns the user data and security token",
            "content": {}
          },
          "400": {
            "description": "If id is null or not found or the username is invalid",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "userDto"
      }
    }
  },
  "components": {
    "schemas": {
      "ServiceDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "SavingToggleDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "state": {
            "type": "boolean"
          },
          "value": {
            "type": "integer",
            "format": "int32"
          },
          "servicesList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ToggleDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "state": {
            "type": "boolean"
          }
        }
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  }
}